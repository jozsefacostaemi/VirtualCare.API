<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidStateForCreation" xml:space="preserve">
    <value>Patient state must be ATTENDED, CANCELLED, or EMPTY for creation</value>
  </data>
  <data name="InvalidStateForAsignation" xml:space="preserve">
    <value>Patient state must be ATTENTIONWAITING, user state must be AVAILABLE, and medical record state must be PENDING for assignment</value>
  </data>
  <data name="InvalidStateForCancel" xml:space="preserve">
    <value>Patient state must be ATTENTIONWAITING, ASSIGNED, or INPROCESS; user state must be ASSIGNED or INPROCESS; and medical record state must be ASSIGNED or INPROCESS for cancellation</value>
  </data>
  <data name="InvalidStateForFinish" xml:space="preserve">
    <value>Patient, user, and medical record states must all be INPROCESS for finalizationsuario y atención deben tener estado en proceso para finalizar.</value>
  </data>
  <data name="InvalidStateForInProcess" xml:space="preserve">
    <value>Patient, user, and medical record states must all be ASSIGNED for starting the process</value>
  </data>
  <data name="TransitionInvalid" xml:space="preserve">
    <value>Invalid transaction</value>
  </data>
  <data name="TransitionValid" xml:space="preserve">
    <value>Valid transaction</value>
  </data>
  <data name="SuccessOperation" xml:space="preserve">
    <value>Success operation</value>
  </data>
  <data name="ThePatientDoesNotExist" xml:space="preserve">
    <value>The patient does not exist</value>
  </data>
  <data name="TheUserDoesNotExist" xml:space="preserve">
    <value>The user does not exist</value>
  </data>
  <data name="TheMedicalRecordDoesNotExist" xml:space="preserve">
    <value>The medical record does not exist</value>
  </data>
  <data name="ThePatientHasAnOngoingAttention" xml:space="preserve">
    <value>The patient has an ongoing appointment</value>
  </data>
  <data name="InformationNotFound" xml:space="preserve">
    <value>Information not found</value>
  </data>
  <data name="TheCodeServiceDoesNotExist" xml:space="preserve">
    <value>The Code Service does not exist</value>
  </data>
  <data name="ErrorOperation" xml:space="preserve">
    <value>Error operation</value>
  </data>
  <data name="SuccessCreation" xml:space="preserve">
    <value>Success creation attention</value>
  </data>
  <data name="SuccessAssignation" xml:space="preserve">
    <value>Success Asignation</value>
  </data>
  <data name="SuccessInProcess" xml:space="preserve">
    <value>Success initiation attention</value>
  </data>
  <data name="SucessFinish" xml:space="preserve">
    <value>Success finalization success</value>
  </data>
  <data name="SucessCancel" xml:space="preserve">
    <value>Success cancellation attention</value>
  </data>
  <data name="DontPossibleProcessCreation" xml:space="preserve">
    <value>Dont possible the process creation</value>
  </data>
  <data name="DoesNotExistQueueCombinations" xml:space="preserve">
    <value>Does not exist queues with combinations between place, city and service</value>
  </data>
  <data name="TheUserDoesNotRelatedPriorityService" xml:space="preserve">
    <value>The user does not related priority service</value>
  </data>
  <data name="SuccessLogin" xml:space="preserve">
    <value>Sucess Login</value>
  </data>
  <data name="InvalidCredentials" xml:space="preserve">
    <value>Invalid credentials</value>
  </data>
</root>